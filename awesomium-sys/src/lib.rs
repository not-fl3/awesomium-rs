/* automatically generated by rust-bindgen */

#![allow(dead_code,
         non_camel_case_types,
         non_upper_case_globals,
         non_snake_case)]
pub type size_t = usize;
pub type wchar_t = ::std::os::raw::c_int;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_char;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
impl ::std::default::Default for __fsid_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __qaddr_t = *mut __quad_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct wait {
    pub _bindgen_data_: [u32; 1usize],
}
impl wait {
    pub unsafe fn w_status(&mut self) -> *mut ::std::os::raw::c_int {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __wait_terminated(&mut self) -> *mut Struct_Unnamed1 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __wait_stopped(&mut self) -> *mut Struct_Unnamed2 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for wait {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Struct_Unnamed1 {
    pub _bindgen_bitfield_1_: ::std::os::raw::c_uint,
}
impl ::std::default::Default for Struct_Unnamed1 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Struct_Unnamed2 {
    pub _bindgen_bitfield_1_: ::std::os::raw::c_uint,
}
impl ::std::default::Default for Struct_Unnamed2 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct __WAIT_STATUS {
    pub _bindgen_data_: [u64; 1usize],
}
impl __WAIT_STATUS {
    pub unsafe fn __uptr(&mut self) -> *mut *mut wait {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __iptr(&mut self) -> *mut *mut ::std::os::raw::c_int {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for __WAIT_STATUS {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct div_t {
    pub quot: ::std::os::raw::c_int,
    pub rem: ::std::os::raw::c_int,
}
impl ::std::default::Default for div_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct ldiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
impl ::std::default::Default for ldiv_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct lldiv_t {
    pub quot: ::std::os::raw::c_longlong,
    pub rem: ::std::os::raw::c_longlong,
}
impl ::std::default::Default for lldiv_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type u_int = __u_int;
pub type u_long = __u_long;
pub type quad_t = __quad_t;
pub type u_quad_t = __u_quad_t;
pub type fsid_t = __fsid_t;
pub type loff_t = __loff_t;
pub type ino_t = __ino_t;
pub type dev_t = __dev_t;
pub type gid_t = __gid_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type uid_t = __uid_t;
pub type off_t = __off_t;
pub type pid_t = __pid_t;
pub type id_t = __id_t;
pub type ssize_t = isize;
pub type daddr_t = __daddr_t;
pub type caddr_t = __caddr_t;
pub type key_t = __key_t;
pub type clock_t = __clock_t;
pub type time_t = __time_t;
pub type clockid_t = __clockid_t;
pub type timer_t = __timer_t;
pub type ulong = ::std::os::raw::c_ulong;
pub type ushort = ::std::os::raw::c_ushort;
pub type uint_ = ::std::os::raw::c_uint;
pub type int8_t = i8;
pub type int16_t = i16;
pub type int32_t = i32;
pub type int64_t = i64;
pub type u_int8_t = ::std::os::raw::c_uchar;
pub type u_int16_t = ::std::os::raw::c_ushort;
pub type u_int32_t = ::std::os::raw::c_uint;
pub type u_int64_t = ::std::os::raw::c_ulong;
pub type register_t = ::std::os::raw::c_long;
pub type __sig_atomic_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct __sigset_t {
    pub __val: [::std::os::raw::c_ulong; 16usize],
}
impl ::std::default::Default for __sigset_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type sigset_t = __sigset_t;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
impl ::std::default::Default for timespec {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
impl ::std::default::Default for timeval {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type suseconds_t = __suseconds_t;
pub type __fd_mask = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct fd_set {
    pub __fds_bits: [__fd_mask; 16usize],
}
impl ::std::default::Default for fd_set {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type fd_mask = __fd_mask;
pub type blksize_t = __blksize_t;
pub type blkcnt_t = __blkcnt_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
pub type pthread_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Copy)]
pub struct pthread_attr_t {
    pub _bindgen_data_: [u64; 7usize],
}
impl pthread_attr_t {
    pub unsafe fn __size(&mut self)
     -> *mut [::std::os::raw::c_char; 56usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_long {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for pthread_attr_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for pthread_attr_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct __pthread_internal_list {
    pub __prev: *mut __pthread_internal_list,
    pub __next: *mut __pthread_internal_list,
}
impl ::std::default::Default for __pthread_internal_list {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __pthread_list_t = __pthread_internal_list;
#[repr(C)]
#[derive(Copy)]
pub struct pthread_mutex_t {
    pub _bindgen_data_: [u64; 5usize],
}
impl pthread_mutex_t {
    pub unsafe fn __data(&mut self) -> *mut __pthread_mutex_s {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __size(&mut self)
     -> *mut [::std::os::raw::c_char; 40usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_long {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for pthread_mutex_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for pthread_mutex_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct __pthread_mutex_s {
    pub __lock: ::std::os::raw::c_int,
    pub __count: ::std::os::raw::c_uint,
    pub __owner: ::std::os::raw::c_int,
    pub __nusers: ::std::os::raw::c_uint,
    pub __kind: ::std::os::raw::c_int,
    pub __spins: ::std::os::raw::c_short,
    pub __elision: ::std::os::raw::c_short,
    pub __list: __pthread_list_t,
}
impl ::std::default::Default for __pthread_mutex_s {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct pthread_mutexattr_t {
    pub _bindgen_data_: [u32; 1usize],
}
impl pthread_mutexattr_t {
    pub unsafe fn __size(&mut self) -> *mut [::std::os::raw::c_char; 4usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_int {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for pthread_mutexattr_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct pthread_cond_t {
    pub _bindgen_data_: [u64; 6usize],
}
impl pthread_cond_t {
    pub unsafe fn __data(&mut self) -> *mut Struct_Unnamed3 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __size(&mut self)
     -> *mut [::std::os::raw::c_char; 48usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_longlong {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for pthread_cond_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for pthread_cond_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Struct_Unnamed3 {
    pub __lock: ::std::os::raw::c_int,
    pub __futex: ::std::os::raw::c_uint,
    pub __total_seq: ::std::os::raw::c_ulonglong,
    pub __wakeup_seq: ::std::os::raw::c_ulonglong,
    pub __woken_seq: ::std::os::raw::c_ulonglong,
    pub __mutex: *mut ::std::os::raw::c_void,
    pub __nwaiters: ::std::os::raw::c_uint,
    pub __broadcast_seq: ::std::os::raw::c_uint,
}
impl ::std::default::Default for Struct_Unnamed3 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct pthread_condattr_t {
    pub _bindgen_data_: [u32; 1usize],
}
impl pthread_condattr_t {
    pub unsafe fn __size(&mut self) -> *mut [::std::os::raw::c_char; 4usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_int {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for pthread_condattr_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_key_t = ::std::os::raw::c_uint;
pub type pthread_once_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy)]
pub struct pthread_rwlock_t {
    pub _bindgen_data_: [u64; 7usize],
}
impl pthread_rwlock_t {
    pub unsafe fn __data(&mut self) -> *mut Struct_Unnamed4 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __size(&mut self)
     -> *mut [::std::os::raw::c_char; 56usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_long {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for pthread_rwlock_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for pthread_rwlock_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Struct_Unnamed4 {
    pub __lock: ::std::os::raw::c_int,
    pub __nr_readers: ::std::os::raw::c_uint,
    pub __readers_wakeup: ::std::os::raw::c_uint,
    pub __writer_wakeup: ::std::os::raw::c_uint,
    pub __nr_readers_queued: ::std::os::raw::c_uint,
    pub __nr_writers_queued: ::std::os::raw::c_uint,
    pub __writer: ::std::os::raw::c_int,
    pub __shared: ::std::os::raw::c_int,
    pub __rwelision: ::std::os::raw::c_char,
    pub __pad1: [::std::os::raw::c_uchar; 7usize],
    pub __pad2: ::std::os::raw::c_ulong,
    pub __flags: ::std::os::raw::c_uint,
}
impl ::std::default::Default for Struct_Unnamed4 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct pthread_rwlockattr_t {
    pub _bindgen_data_: [u64; 1usize],
}
impl pthread_rwlockattr_t {
    pub unsafe fn __size(&mut self) -> *mut [::std::os::raw::c_char; 8usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_long {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for pthread_rwlockattr_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_spinlock_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct pthread_barrier_t {
    pub _bindgen_data_: [u64; 4usize],
}
impl pthread_barrier_t {
    pub unsafe fn __size(&mut self)
     -> *mut [::std::os::raw::c_char; 32usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_long {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for pthread_barrier_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct pthread_barrierattr_t {
    pub _bindgen_data_: [u32; 1usize],
}
impl pthread_barrierattr_t {
    pub unsafe fn __size(&mut self) -> *mut [::std::os::raw::c_char; 4usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_int {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for pthread_barrierattr_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct random_data {
    pub fptr: *mut int32_t,
    pub rptr: *mut int32_t,
    pub state: *mut int32_t,
    pub rand_type: ::std::os::raw::c_int,
    pub rand_deg: ::std::os::raw::c_int,
    pub rand_sep: ::std::os::raw::c_int,
    pub end_ptr: *mut int32_t,
}
impl ::std::default::Default for random_data {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct drand48_data {
    pub __x: [::std::os::raw::c_ushort; 3usize],
    pub __old_x: [::std::os::raw::c_ushort; 3usize],
    pub __c: ::std::os::raw::c_ushort,
    pub __init: ::std::os::raw::c_ushort,
    pub __a: ::std::os::raw::c_ulonglong,
}
impl ::std::default::Default for drand48_data {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __compar_fn_t =
    ::std::option::Option<unsafe extern "C" fn(arg1:
                                                   *const ::std::os::raw::c_void,
                                               arg2:
                                                   *const ::std::os::raw::c_void)
                              -> ::std::os::raw::c_int>;
pub type wchar16 = ::std::os::raw::c_ushort;
pub type int64 = ::std::os::raw::c_long;
pub enum _awe_webview { }
pub type awe_webview = _awe_webview;
pub enum _awe_jsvalue { }
pub type awe_jsvalue = _awe_jsvalue;
pub enum _awe_jsarray { }
pub type awe_jsarray = _awe_jsarray;
pub enum _awe_jsobject { }
pub type awe_jsobject = _awe_jsobject;
pub enum _awe_renderbuffer { }
pub type awe_renderbuffer = _awe_renderbuffer;
pub enum _awe_header_definition { }
pub type awe_header_definition = _awe_header_definition;
pub enum _awe_resource_response { }
pub type awe_resource_response = _awe_resource_response;
pub enum _awe_resource_request { }
pub type awe_resource_request = _awe_resource_request;
pub enum _awe_upload_element { }
pub type awe_upload_element = _awe_upload_element;
pub enum _awe_string { }
pub type awe_string = _awe_string;
pub enum _awe_history_query_result { }
pub type awe_history_query_result = _awe_history_query_result;
pub enum _awe_history_entry { }
pub type awe_history_entry = _awe_history_entry;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum _awe_loglevel {
    AWE_LL_NONE = 0,
    AWE_LL_NORMAL = 1,
    AWE_LL_VERBOSE = 2,
}
pub type awe_loglevel = _awe_loglevel;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum _awe_mousebutton {
    AWE_MB_LEFT = 0,
    AWE_MB_MIDDLE = 1,
    AWE_MB_RIGHT = 2,
}
pub type awe_mousebutton = _awe_mousebutton;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum _awe_url_filtering_mode {
    AWE_UFM_NONE = 0,
    AWE_UFM_BLACKLIST = 1,
    AWE_UFM_WHITELIST = 2,
}
pub type awe_url_filtering_mode = _awe_url_filtering_mode;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum _awe_webkey_type {
    AWE_WKT_KEYDOWN = 0,
    AWE_WKT_KEYUP = 1,
    AWE_WKT_CHAR = 2,
}
pub type awe_webkey_type = _awe_webkey_type;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum _awe_webkey_modifiers {
    AWE_WKM_SHIFT_KEY = 1,
    AWE_WKM_CONTROL_KEY = 2,
    AWE_WKM_ALT_KEY = 4,
    AWE_WKM_META_KEY = 8,
    AWE_WKM_IS_KEYPAD = 16,
    AWE_WKM_IS_AUTOREPEAT = 32,
}
pub type awe_webkey_modifiers = _awe_webkey_modifiers;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum _awe_cursor_type {
    AWE_CUR_POINTER = 0,
    AWE_CUR_CROSS = 1,
    AWE_CUR_HAND = 2,
    AWE_CUR_IBEAM = 3,
    AWE_CUR_WAIT = 4,
    AWE_CUR_HELP = 5,
    AWE_CUR_EAST_RESIZE = 6,
    AWE_CUR_NORTH_RESIZE = 7,
    AWE_CUR_NORTHEAST_RESIZE = 8,
    AWE_CUR_NORTHWEST_RESIZE = 9,
    AWE_CUR_SOUTH_RESIZE = 10,
    AWE_CUR_SOUTHEAST_RESIZE = 11,
    AWE_CUR_SOUTHWEST_RESIZE = 12,
    AWE_CUR_WEST_RESIZE = 13,
    AWE_CUR_NORTHSOUTH_RESIZE = 14,
    AWE_CUR_EASTWEST_RESIZE = 15,
    AWE_CUR_NORTHEAST_SOUTHWEST_RESIZE = 16,
    AWE_CUR_NORTHWEST_SOUTHEAST_RESIZE = 17,
    AWE_CUR_COLUMN_RESIZE = 18,
    AWE_CUR_ROW_RESIZE = 19,
    AWE_CUR_MIDDLE_PANNING = 20,
    AWE_CUR_EAST_PANNING = 21,
    AWE_CUR_NORTH_PANNING = 22,
    AWE_CUR_NORTHEAST_PANNING = 23,
    AWE_CUR_NORTHWEST_PANNING = 24,
    AWE_CUR_SOUTH_PANNING = 25,
    AWE_CUR_SOUTHEAST_PANNING = 26,
    AWE_CUR_SOUTHWEST_PANNING = 27,
    AWE_CUR_WEST_PANNING = 28,
    AWE_CUR_MOVE = 29,
    AWE_CUR_VERTICAL_TEXT = 30,
    AWE_CUR_CELL = 31,
    AWE_CUR_CONTEXT_MENU = 32,
    AWE_CUR_ALIAS = 33,
    AWE_CUR_PROGRESS = 34,
    AWE_CUR_NO_DROP = 35,
    AWE_CUR_COPY = 36,
    AWE_CUR_NONE = 37,
    AWE_CUR_NOT_ALLOWED = 38,
    AWE_CUR_ZOOM_IN = 39,
    AWE_CUR_ZOOM_OUT = 40,
    AWE_CUR_CUSTOM = 41,
}
pub type awe_cursor_type = _awe_cursor_type;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum _awe_ime_state {
    AWE_IME_DISABLE = 0,
    AWE_IME_MOVE_WINDOW = 1,
    AWE_IME_COMPLETE_COMPOSITION = 2,
}
pub type awe_ime_state = _awe_ime_state;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum _awe_media_type {
    AWE_MEDIA_TYPE_NONE = 0,
    AWE_MEDIA_TYPE_IMAGE = 1,
    AWE_MEDIA_TYPE_VIDEO = 2,
    AWE_MEDIA_TYPE_AUDIO = 3,
}
pub type awe_media_type = _awe_media_type;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum _awe_media_state {
    AWE_MEDIA_STATE_NONE = 0,
    AWE_MEDIA_STATE_ERROR = 1,
    AWE_MEDIA_STATE_PAUSED = 2,
    AWE_MEDIA_STATE_MUTED = 4,
    AWE_MEDIA_STATE_LOOP = 8,
    AWE_MEDIA_STATE_CAN_SAVE = 16,
    AWE_MEDIA_STATE_HAS_AUDIO = 32,
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum _awe_can_edit_flags {
    AWE_CAN_EDIT_NOTHING = 0,
    AWE_CAN_UNDO = 1,
    AWE_CAN_REDO = 2,
    AWE_CAN_CUT = 4,
    AWE_CAN_COPY = 8,
    AWE_CAN_PASTE = 16,
    AWE_CAN_DELETE = 32,
    AWE_CAN_SELECT_ALL = 64,
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum _awe_dialog_flags {
    AWE_DIALOG_HAS_OK_BUTTON = 1,
    AWE_DIALOG_HAS_CANCEL_BUTTON = 2,
    AWE_DIALOG_HAS_PROMPT_FIELD = 4,
    AWE_DIALOG_HAS_MESSAGE = 8,
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _awe_webkeyboardevent {
    pub type_: awe_webkey_type,
    pub modifiers: ::std::os::raw::c_int,
    pub virtual_key_code: ::std::os::raw::c_int,
    pub native_key_code: ::std::os::raw::c_int,
    pub text: [wchar16; 4usize],
    pub unmodified_text: [wchar16; 4usize],
    pub is_system_key: u8,
}
impl ::std::default::Default for _awe_webkeyboardevent {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type awe_webkeyboardevent = _awe_webkeyboardevent;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _awe_rect {
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
    pub width: ::std::os::raw::c_int,
    pub height: ::std::os::raw::c_int,
}
impl ::std::default::Default for _awe_rect {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type awe_rect = _awe_rect;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum _awe_jsvalue_type {
    JSVALUE_TYPE_NULL = 0,
    JSVALUE_TYPE_BOOLEAN = 1,
    JSVALUE_TYPE_INTEGER = 2,
    JSVALUE_TYPE_DOUBLE = 3,
    JSVALUE_TYPE_STRING = 4,
    JSVALUE_TYPE_OBJECT = 5,
    JSVALUE_TYPE_ARRAY = 6,
}
pub type awe_jsvalue_type = _awe_jsvalue_type;
extern "C" {
    pub fn __ctype_get_mb_cur_max() -> size_t;
    pub fn atof(__nptr: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_double;
    pub fn atoi(__nptr: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn atol(__nptr: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_long;
    pub fn atoll(__nptr: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_longlong;
    pub fn strtod(__nptr: *const ::std::os::raw::c_char,
                  __endptr: *mut *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_double;
    pub fn strtof(__nptr: *const ::std::os::raw::c_char,
                  __endptr: *mut *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_float;
    pub fn strtold(__nptr: *const ::std::os::raw::c_char,
                   __endptr: *mut *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_double;
    pub fn strtol(__nptr: *const ::std::os::raw::c_char,
                  __endptr: *mut *mut ::std::os::raw::c_char,
                  __base: ::std::os::raw::c_int) -> ::std::os::raw::c_long;
    pub fn strtoul(__nptr: *const ::std::os::raw::c_char,
                   __endptr: *mut *mut ::std::os::raw::c_char,
                   __base: ::std::os::raw::c_int) -> ::std::os::raw::c_ulong;
    pub fn strtoq(__nptr: *const ::std::os::raw::c_char,
                  __endptr: *mut *mut ::std::os::raw::c_char,
                  __base: ::std::os::raw::c_int)
     -> ::std::os::raw::c_longlong;
    pub fn strtouq(__nptr: *const ::std::os::raw::c_char,
                   __endptr: *mut *mut ::std::os::raw::c_char,
                   __base: ::std::os::raw::c_int)
     -> ::std::os::raw::c_ulonglong;
    pub fn strtoll(__nptr: *const ::std::os::raw::c_char,
                   __endptr: *mut *mut ::std::os::raw::c_char,
                   __base: ::std::os::raw::c_int)
     -> ::std::os::raw::c_longlong;
    pub fn strtoull(__nptr: *const ::std::os::raw::c_char,
                    __endptr: *mut *mut ::std::os::raw::c_char,
                    __base: ::std::os::raw::c_int)
     -> ::std::os::raw::c_ulonglong;
    pub fn l64a(__n: ::std::os::raw::c_long) -> *mut ::std::os::raw::c_char;
    pub fn a64l(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
    pub fn select(__nfds: ::std::os::raw::c_int, __readfds: *mut fd_set,
                  __writefds: *mut fd_set, __exceptfds: *mut fd_set,
                  __timeout: *mut timeval) -> ::std::os::raw::c_int;
    pub fn pselect(__nfds: ::std::os::raw::c_int, __readfds: *mut fd_set,
                   __writefds: *mut fd_set, __exceptfds: *mut fd_set,
                   __timeout: *const timespec, __sigmask: *const __sigset_t)
     -> ::std::os::raw::c_int;
    pub fn gnu_dev_major(__dev: ::std::os::raw::c_ulonglong)
     -> ::std::os::raw::c_uint;
    pub fn gnu_dev_minor(__dev: ::std::os::raw::c_ulonglong)
     -> ::std::os::raw::c_uint;
    pub fn gnu_dev_makedev(__major: ::std::os::raw::c_uint,
                           __minor: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_ulonglong;
    pub fn random() -> ::std::os::raw::c_long;
    pub fn srandom(__seed: ::std::os::raw::c_uint);
    pub fn initstate(__seed: ::std::os::raw::c_uint,
                     __statebuf: *mut ::std::os::raw::c_char,
                     __statelen: size_t) -> *mut ::std::os::raw::c_char;
    pub fn setstate(__statebuf: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn random_r(__buf: *mut random_data, __result: *mut int32_t)
     -> ::std::os::raw::c_int;
    pub fn srandom_r(__seed: ::std::os::raw::c_uint, __buf: *mut random_data)
     -> ::std::os::raw::c_int;
    pub fn initstate_r(__seed: ::std::os::raw::c_uint,
                       __statebuf: *mut ::std::os::raw::c_char,
                       __statelen: size_t, __buf: *mut random_data)
     -> ::std::os::raw::c_int;
    pub fn setstate_r(__statebuf: *mut ::std::os::raw::c_char,
                      __buf: *mut random_data) -> ::std::os::raw::c_int;
    pub fn rand() -> ::std::os::raw::c_int;
    pub fn srand(__seed: ::std::os::raw::c_uint);
    pub fn rand_r(__seed: *mut ::std::os::raw::c_uint)
     -> ::std::os::raw::c_int;
    pub fn drand48() -> ::std::os::raw::c_double;
    pub fn erand48(__xsubi: *mut ::std::os::raw::c_ushort)
     -> ::std::os::raw::c_double;
    pub fn lrand48() -> ::std::os::raw::c_long;
    pub fn nrand48(__xsubi: *mut ::std::os::raw::c_ushort)
     -> ::std::os::raw::c_long;
    pub fn mrand48() -> ::std::os::raw::c_long;
    pub fn jrand48(__xsubi: *mut ::std::os::raw::c_ushort)
     -> ::std::os::raw::c_long;
    pub fn srand48(__seedval: ::std::os::raw::c_long);
    pub fn seed48(__seed16v: *mut ::std::os::raw::c_ushort)
     -> *mut ::std::os::raw::c_ushort;
    pub fn lcong48(__param: *mut ::std::os::raw::c_ushort);
    pub fn drand48_r(__buffer: *mut drand48_data,
                     __result: *mut ::std::os::raw::c_double)
     -> ::std::os::raw::c_int;
    pub fn erand48_r(__xsubi: *mut ::std::os::raw::c_ushort,
                     __buffer: *mut drand48_data,
                     __result: *mut ::std::os::raw::c_double)
     -> ::std::os::raw::c_int;
    pub fn lrand48_r(__buffer: *mut drand48_data,
                     __result: *mut ::std::os::raw::c_long)
     -> ::std::os::raw::c_int;
    pub fn nrand48_r(__xsubi: *mut ::std::os::raw::c_ushort,
                     __buffer: *mut drand48_data,
                     __result: *mut ::std::os::raw::c_long)
     -> ::std::os::raw::c_int;
    pub fn mrand48_r(__buffer: *mut drand48_data,
                     __result: *mut ::std::os::raw::c_long)
     -> ::std::os::raw::c_int;
    pub fn jrand48_r(__xsubi: *mut ::std::os::raw::c_ushort,
                     __buffer: *mut drand48_data,
                     __result: *mut ::std::os::raw::c_long)
     -> ::std::os::raw::c_int;
    pub fn srand48_r(__seedval: ::std::os::raw::c_long,
                     __buffer: *mut drand48_data) -> ::std::os::raw::c_int;
    pub fn seed48_r(__seed16v: *mut ::std::os::raw::c_ushort,
                    __buffer: *mut drand48_data) -> ::std::os::raw::c_int;
    pub fn lcong48_r(__param: *mut ::std::os::raw::c_ushort,
                     __buffer: *mut drand48_data) -> ::std::os::raw::c_int;
    pub fn malloc(__size: size_t) -> *mut ::std::os::raw::c_void;
    pub fn calloc(__nmemb: size_t, __size: size_t)
     -> *mut ::std::os::raw::c_void;
    pub fn realloc(__ptr: *mut ::std::os::raw::c_void, __size: size_t)
     -> *mut ::std::os::raw::c_void;
    pub fn free(__ptr: *mut ::std::os::raw::c_void);
    pub fn cfree(__ptr: *mut ::std::os::raw::c_void);
    pub fn alloca(__size: size_t) -> *mut ::std::os::raw::c_void;
    pub fn valloc(__size: size_t) -> *mut ::std::os::raw::c_void;
    pub fn posix_memalign(__memptr: *mut *mut ::std::os::raw::c_void,
                          __alignment: size_t, __size: size_t)
     -> ::std::os::raw::c_int;
    pub fn aligned_alloc(__alignment: size_t, __size: size_t)
     -> *mut ::std::os::raw::c_void;
    pub fn abort();
    pub fn atexit(__func: ::std::option::Option<extern "C" fn()>)
     -> ::std::os::raw::c_int;
    pub fn at_quick_exit(__func: ::std::option::Option<extern "C" fn()>)
     -> ::std::os::raw::c_int;
    pub fn on_exit(__func:
                       ::std::option::Option<unsafe extern "C" fn(__status:
                                                                      ::std::os::raw::c_int,
                                                                  __arg:
                                                                      *mut ::std::os::raw::c_void)>,
                   __arg: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn exit(__status: ::std::os::raw::c_int);
    pub fn quick_exit(__status: ::std::os::raw::c_int);
    pub fn _Exit(__status: ::std::os::raw::c_int);
    pub fn getenv(__name: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn putenv(__string: *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn setenv(__name: *const ::std::os::raw::c_char,
                  __value: *const ::std::os::raw::c_char,
                  __replace: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn unsetenv(__name: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn clearenv() -> ::std::os::raw::c_int;
    pub fn mktemp(__template: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn mkstemp(__template: *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn mkstemps(__template: *mut ::std::os::raw::c_char,
                    __suffixlen: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn mkdtemp(__template: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn system(__command: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn realpath(__name: *const ::std::os::raw::c_char,
                    __resolved: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn bsearch(__key: *const ::std::os::raw::c_void,
                   __base: *const ::std::os::raw::c_void, __nmemb: size_t,
                   __size: size_t, __compar: __compar_fn_t)
     -> *mut ::std::os::raw::c_void;
    pub fn qsort(__base: *mut ::std::os::raw::c_void, __nmemb: size_t,
                 __size: size_t, __compar: __compar_fn_t);
    pub fn abs(__x: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn labs(__x: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
    pub fn llabs(__x: ::std::os::raw::c_longlong)
     -> ::std::os::raw::c_longlong;
    pub fn div(__numer: ::std::os::raw::c_int, __denom: ::std::os::raw::c_int)
     -> div_t;
    pub fn ldiv(__numer: ::std::os::raw::c_long,
                __denom: ::std::os::raw::c_long) -> ldiv_t;
    pub fn lldiv(__numer: ::std::os::raw::c_longlong,
                 __denom: ::std::os::raw::c_longlong) -> lldiv_t;
    pub fn ecvt(__value: ::std::os::raw::c_double,
                __ndigit: ::std::os::raw::c_int,
                __decpt: *mut ::std::os::raw::c_int,
                __sign: *mut ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
    pub fn fcvt(__value: ::std::os::raw::c_double,
                __ndigit: ::std::os::raw::c_int,
                __decpt: *mut ::std::os::raw::c_int,
                __sign: *mut ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
    pub fn gcvt(__value: ::std::os::raw::c_double,
                __ndigit: ::std::os::raw::c_int,
                __buf: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn qecvt(__value: ::std::os::raw::c_double,
                 __ndigit: ::std::os::raw::c_int,
                 __decpt: *mut ::std::os::raw::c_int,
                 __sign: *mut ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
    pub fn qfcvt(__value: ::std::os::raw::c_double,
                 __ndigit: ::std::os::raw::c_int,
                 __decpt: *mut ::std::os::raw::c_int,
                 __sign: *mut ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
    pub fn qgcvt(__value: ::std::os::raw::c_double,
                 __ndigit: ::std::os::raw::c_int,
                 __buf: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn ecvt_r(__value: ::std::os::raw::c_double,
                  __ndigit: ::std::os::raw::c_int,
                  __decpt: *mut ::std::os::raw::c_int,
                  __sign: *mut ::std::os::raw::c_int,
                  __buf: *mut ::std::os::raw::c_char, __len: size_t)
     -> ::std::os::raw::c_int;
    pub fn fcvt_r(__value: ::std::os::raw::c_double,
                  __ndigit: ::std::os::raw::c_int,
                  __decpt: *mut ::std::os::raw::c_int,
                  __sign: *mut ::std::os::raw::c_int,
                  __buf: *mut ::std::os::raw::c_char, __len: size_t)
     -> ::std::os::raw::c_int;
    pub fn qecvt_r(__value: ::std::os::raw::c_double,
                   __ndigit: ::std::os::raw::c_int,
                   __decpt: *mut ::std::os::raw::c_int,
                   __sign: *mut ::std::os::raw::c_int,
                   __buf: *mut ::std::os::raw::c_char, __len: size_t)
     -> ::std::os::raw::c_int;
    pub fn qfcvt_r(__value: ::std::os::raw::c_double,
                   __ndigit: ::std::os::raw::c_int,
                   __decpt: *mut ::std::os::raw::c_int,
                   __sign: *mut ::std::os::raw::c_int,
                   __buf: *mut ::std::os::raw::c_char, __len: size_t)
     -> ::std::os::raw::c_int;
    pub fn mblen(__s: *const ::std::os::raw::c_char, __n: size_t)
     -> ::std::os::raw::c_int;
    pub fn mbtowc(__pwc: *mut wchar_t, __s: *const ::std::os::raw::c_char,
                  __n: size_t) -> ::std::os::raw::c_int;
    pub fn wctomb(__s: *mut ::std::os::raw::c_char, __wchar: wchar_t)
     -> ::std::os::raw::c_int;
    pub fn mbstowcs(__pwcs: *mut wchar_t, __s: *const ::std::os::raw::c_char,
                    __n: size_t) -> size_t;
    pub fn wcstombs(__s: *mut ::std::os::raw::c_char, __pwcs: *const wchar_t,
                    __n: size_t) -> size_t;
    pub fn rpmatch(__response: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn getsubopt(__optionp: *mut *mut ::std::os::raw::c_char,
                     __tokens: *const *mut ::std::os::raw::c_char,
                     __valuep: *mut *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn getloadavg(__loadavg: *mut ::std::os::raw::c_double,
                      __nelem: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn awe_is_child_process(argc: ::std::os::raw::c_int,
                                argv: *mut *mut ::std::os::raw::c_char) -> u8;
    pub fn awe_child_process_main(argc: ::std::os::raw::c_int,
                                  argv: *mut *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn awe_string_empty() -> *const awe_string;
    pub fn awe_string_create_from_ascii(str: *const ::std::os::raw::c_char,
                                        len: size_t) -> *mut awe_string;
    pub fn awe_string_create_from_wide(str: *const wchar_t, len: size_t)
     -> *mut awe_string;
    pub fn awe_string_create_from_utf8(str: *const ::std::os::raw::c_char,
                                       len: size_t) -> *mut awe_string;
    pub fn awe_string_create_from_utf16(str: *const wchar16, len: size_t)
     -> *mut awe_string;
    pub fn awe_string_destroy(str: *mut awe_string);
    pub fn awe_string_get_length(str: *const awe_string) -> size_t;
    pub fn awe_string_get_utf16(str: *const awe_string) -> *const wchar16;
    pub fn awe_string_to_wide(str: *const awe_string, dest: *mut wchar_t,
                              len: size_t) -> ::std::os::raw::c_int;
    pub fn awe_string_to_utf8(str: *const awe_string,
                              dest: *mut ::std::os::raw::c_char, len: size_t)
     -> ::std::os::raw::c_int;
    pub fn awe_webcore_initialize(enable_plugins: u8, enable_javascript: u8,
                                  enable_databases: u8,
                                  package_path: *const awe_string,
                                  locale_path: *const awe_string,
                                  user_data_path: *const awe_string,
                                  plugin_path: *const awe_string,
                                  log_path: *const awe_string,
                                  log_level: awe_loglevel,
                                  force_single_process: u8,
                                  child_process_path: *const awe_string,
                                  enable_auto_detect_encoding: u8,
                                  accept_language_override: *const awe_string,
                                  default_charset_override: *const awe_string,
                                  user_agent_override: *const awe_string,
                                  proxy_server: *const awe_string,
                                  proxy_config_script: *const awe_string,
                                  auth_server_whitelist: *const awe_string,
                                  save_cache_and_cookies: u8,
                                  max_cache_size: ::std::os::raw::c_int,
                                  disable_same_origin_policy: u8,
                                  disable_win_message_pump: u8,
                                  custom_css: *const awe_string);
    pub fn awe_webcore_initialize_default();
    pub fn awe_webcore_shutdown();
    pub fn awe_webcore_set_base_directory(base_dir_path: *const awe_string);
    pub fn awe_webcore_create_webview(width: ::std::os::raw::c_int,
                                      height: ::std::os::raw::c_int,
                                      view_source: u8) -> *mut awe_webview;
    pub fn awe_webcore_set_custom_response_page(status_code:
                                                    ::std::os::raw::c_int,
                                                file_path: *const awe_string);
    pub fn awe_webcore_update();
    pub fn awe_webcore_get_base_directory() -> *const awe_string;
    pub fn awe_webcore_are_plugins_enabled() -> u8;
    pub fn awe_webcore_clear_cache();
    pub fn awe_webcore_clear_cookies();
    pub fn awe_webcore_set_cookie(url: *const awe_string,
                                  cookie_string: *const awe_string,
                                  is_http_only: u8, force_session_cookie: u8);
    pub fn awe_webcore_get_cookies(url: *const awe_string,
                                   exclude_http_only: u8)
     -> *const awe_string;
    pub fn awe_webcore_delete_cookie(url: *const awe_string,
                                     cookie_name: *const awe_string);
    pub fn awe_webcore_set_suppress_printer_dialog(suppress: u8);
    pub fn awe_webcore_query_history(full_text_query: *const awe_string,
                                     num_days_ago: ::std::os::raw::c_int,
                                     max_count: ::std::os::raw::c_int)
     -> *mut awe_history_query_result;
    pub fn awe_webview_destroy(webview: *mut awe_webview);
    pub fn awe_webview_load_url(webview: *mut awe_webview,
                                url: *const awe_string,
                                frame_name: *const awe_string,
                                username: *const awe_string,
                                password: *const awe_string);
    pub fn awe_webview_load_html(webview: *mut awe_webview,
                                 html: *const awe_string,
                                 frame_name: *const awe_string);
    pub fn awe_webview_load_file(webview: *mut awe_webview,
                                 file: *const awe_string,
                                 frame_name: *const awe_string);
    pub fn awe_webview_get_url(webview: *mut awe_webview) -> *mut awe_string;
    pub fn awe_webview_go_to_history_offset(webview: *mut awe_webview,
                                            offset: ::std::os::raw::c_int);
    pub fn awe_webview_get_history_back_count(webview: *mut awe_webview)
     -> ::std::os::raw::c_int;
    pub fn awe_webview_get_history_forward_count(webview: *mut awe_webview)
     -> ::std::os::raw::c_int;
    pub fn awe_webview_stop(webview: *mut awe_webview);
    pub fn awe_webview_reload(webview: *mut awe_webview);
    pub fn awe_webview_execute_javascript(webview: *mut awe_webview,
                                          javascript: *const awe_string,
                                          frame_name: *const awe_string);
    pub fn awe_webview_execute_javascript_with_result(webview:
                                                          *mut awe_webview,
                                                      javascript:
                                                          *const awe_string,
                                                      frame_name:
                                                          *const awe_string,
                                                      timeout_ms:
                                                          ::std::os::raw::c_int)
     -> *mut awe_jsvalue;
    pub fn awe_webview_call_javascript_function(webview: *mut awe_webview,
                                                object: *const awe_string,
                                                function: *const awe_string,
                                                arguments: *const awe_jsarray,
                                                frame_name:
                                                    *const awe_string);
    pub fn awe_webview_create_object(webview: *mut awe_webview,
                                     object_name: *const awe_string);
    pub fn awe_webview_destroy_object(webview: *mut awe_webview,
                                      object_name: *const awe_string);
    pub fn awe_webview_set_object_property(webview: *mut awe_webview,
                                           object_name: *const awe_string,
                                           property_name: *const awe_string,
                                           value: *const awe_jsvalue);
    pub fn awe_webview_set_object_callback(webview: *mut awe_webview,
                                           object_name: *const awe_string,
                                           callback_name: *const awe_string);
    pub fn awe_webview_is_loading_page(webview: *mut awe_webview) -> u8;
    pub fn awe_webview_is_dirty(webview: *mut awe_webview) -> u8;
    pub fn awe_webview_get_dirty_bounds(webview: *mut awe_webview)
     -> awe_rect;
    pub fn awe_webview_render(webview: *mut awe_webview)
     -> *const awe_renderbuffer;
    pub fn awe_webview_pause_rendering(webview: *mut awe_webview);
    pub fn awe_webview_resume_rendering(webview: *mut awe_webview);
    pub fn awe_webview_inject_mouse_move(webview: *mut awe_webview,
                                         x: ::std::os::raw::c_int,
                                         y: ::std::os::raw::c_int);
    pub fn awe_webview_inject_mouse_down(webview: *mut awe_webview,
                                         button: awe_mousebutton);
    pub fn awe_webview_inject_mouse_up(webview: *mut awe_webview,
                                       button: awe_mousebutton);
    pub fn awe_webview_inject_mouse_wheel(webview: *mut awe_webview,
                                          scroll_amount_vert:
                                              ::std::os::raw::c_int,
                                          scroll_amount_horz:
                                              ::std::os::raw::c_int);
    pub fn awe_webview_inject_keyboard_event(webview: *mut awe_webview,
                                             key_event: awe_webkeyboardevent);
    pub fn awe_webview_cut(webview: *mut awe_webview);
    pub fn awe_webview_copy(webview: *mut awe_webview);
    pub fn awe_webview_paste(webview: *mut awe_webview);
    pub fn awe_webview_select_all(webview: *mut awe_webview);
    pub fn awe_webview_copy_image_at(webview: *mut awe_webview,
                                     x: ::std::os::raw::c_int,
                                     y: ::std::os::raw::c_int);
    pub fn awe_webview_set_zoom(webview: *mut awe_webview,
                                zoom_percent: ::std::os::raw::c_int);
    pub fn awe_webview_reset_zoom(webview: *mut awe_webview);
    pub fn awe_webview_get_zoom(webview: *mut awe_webview)
     -> ::std::os::raw::c_int;
    pub fn awe_webview_get_zoom_for_host(webview: *mut awe_webview,
                                         host: *const awe_string)
     -> ::std::os::raw::c_int;
    pub fn awe_webview_resize(webview: *mut awe_webview,
                              width: ::std::os::raw::c_int,
                              height: ::std::os::raw::c_int,
                              wait_for_repaint: u8,
                              repaint_timeout_ms: ::std::os::raw::c_int)
     -> u8;
    pub fn awe_webview_is_resizing(webview: *mut awe_webview) -> u8;
    pub fn awe_webview_unfocus(webview: *mut awe_webview);
    pub fn awe_webview_focus(webview: *mut awe_webview);
    pub fn awe_webview_set_transparent(webview: *mut awe_webview,
                                       is_transparent: u8);
    pub fn awe_webview_is_transparent(webview: *mut awe_webview) -> u8;
    pub fn awe_webview_set_url_filtering_mode(webview: *mut awe_webview,
                                              mode: awe_url_filtering_mode);
    pub fn awe_webview_add_url_filter(webview: *mut awe_webview,
                                      filter: *const awe_string);
    pub fn awe_webview_clear_all_url_filters(webview: *mut awe_webview);
    pub fn awe_webview_set_header_definition(webview: *mut awe_webview,
                                             name: *const awe_string,
                                             num_fields: size_t,
                                             field_names:
                                                 *mut *const awe_string,
                                             field_values:
                                                 *mut *const awe_string);
    pub fn awe_webview_add_header_rewrite_rule(webview: *mut awe_webview,
                                               rule: *const awe_string,
                                               name: *const awe_string);
    pub fn awe_webview_remove_header_rewrite_rule(webview: *mut awe_webview,
                                                  rule: *const awe_string);
    pub fn awe_webview_remove_header_rewrite_rules_by_definition_name(webview:
                                                                          *mut awe_webview,
                                                                      name:
                                                                          *const awe_string);
    pub fn awe_webview_choose_file(webview: *mut awe_webview,
                                   file_path: *const awe_string);
    pub fn awe_webview_print(webview: *mut awe_webview);
    pub fn awe_webview_request_scroll_data(webview: *mut awe_webview,
                                           frame_name: *const awe_string);
    pub fn awe_webview_find(webview: *mut awe_webview,
                            request_id: ::std::os::raw::c_int,
                            search_string: *const awe_string, forward: u8,
                            case_sensitive: u8, find_next: u8);
    pub fn awe_webview_stop_find(webview: *mut awe_webview,
                                 clear_selection: u8);
    pub fn awe_webview_translate_page(webview: *mut awe_webview,
                                      source_language: *const awe_string,
                                      target_language: *const awe_string);
    pub fn awe_webview_activate_ime(webview: *mut awe_webview, activate: u8);
    pub fn awe_webview_set_ime_composition(webview: *mut awe_webview,
                                           input_string: *const awe_string,
                                           cursor_pos: ::std::os::raw::c_int,
                                           target_start:
                                               ::std::os::raw::c_int,
                                           target_end: ::std::os::raw::c_int);
    pub fn awe_webview_confirm_ime_composition(webview: *mut awe_webview,
                                               input_string:
                                                   *const awe_string);
    pub fn awe_webview_cancel_ime_composition(webview: *mut awe_webview);
    pub fn awe_webview_login(webview: *mut awe_webview,
                             request_id: ::std::os::raw::c_int,
                             username: *const awe_string,
                             password: *const awe_string);
    pub fn awe_webview_cancel_login(webview: *mut awe_webview,
                                    request_id: ::std::os::raw::c_int);
    pub fn awe_webview_close_javascript_dialog(webview: *mut awe_webview,
                                               request_id:
                                                   ::std::os::raw::c_int,
                                               was_cancelled: u8,
                                               prompt_text:
                                                   *const awe_string);
    pub fn awe_webview_set_callback_begin_navigation(webview:
                                                         *mut awe_webview,
                                                     callback:
                                                         ::std::option::Option<unsafe extern "C" fn(caller:
                                                                                                        *mut awe_webview,
                                                                                                    url:
                                                                                                        *const awe_string,
                                                                                                    frame_name:
                                                                                                        *const awe_string)>);
    pub fn awe_webview_set_callback_begin_loading(webview: *mut awe_webview,
                                                  callback:
                                                      ::std::option::Option<unsafe extern "C" fn(caller:
                                                                                                     *mut awe_webview,
                                                                                                 url:
                                                                                                     *const awe_string,
                                                                                                 frame_name:
                                                                                                     *const awe_string,
                                                                                                 status_code:
                                                                                                     ::std::os::raw::c_int,
                                                                                                 mime_type:
                                                                                                     *const awe_string)>);
    pub fn awe_webview_set_callback_finish_loading(webview: *mut awe_webview,
                                                   callback:
                                                       ::std::option::Option<unsafe extern "C" fn(caller:
                                                                                                      *mut awe_webview)>);
    pub fn awe_webview_set_callback_js_callback(webview: *mut awe_webview,
                                                callback:
                                                    ::std::option::Option<unsafe extern "C" fn(caller:
                                                                                                   *mut awe_webview,
                                                                                               object_name:
                                                                                                   *const awe_string,
                                                                                               callback_name:
                                                                                                   *const awe_string,
                                                                                               arguments:
                                                                                                   *const awe_jsarray)>);
    pub fn awe_webview_set_callback_receive_title(webview: *mut awe_webview,
                                                  callback:
                                                      ::std::option::Option<unsafe extern "C" fn(caller:
                                                                                                     *mut awe_webview,
                                                                                                 title:
                                                                                                     *const awe_string,
                                                                                                 frame_name:
                                                                                                     *const awe_string)>);
    pub fn awe_webview_set_callback_change_tooltip(webview: *mut awe_webview,
                                                   callback:
                                                       ::std::option::Option<unsafe extern "C" fn(caller:
                                                                                                      *mut awe_webview,
                                                                                                  tooltip:
                                                                                                      *const awe_string)>);
    pub fn awe_webview_set_callback_change_cursor(webview: *mut awe_webview,
                                                  callback:
                                                      ::std::option::Option<unsafe extern "C" fn(caller:
                                                                                                     *mut awe_webview,
                                                                                                 cursor:
                                                                                                     awe_cursor_type)>);
    pub fn awe_webview_set_callback_change_keyboard_focus(webview:
                                                              *mut awe_webview,
                                                          callback:
                                                              ::std::option::Option<unsafe extern "C" fn(caller:
                                                                                                             *mut awe_webview,
                                                                                                         is_focused:
                                                                                                             u8)>);
    pub fn awe_webview_set_callback_change_target_url(webview:
                                                          *mut awe_webview,
                                                      callback:
                                                          ::std::option::Option<unsafe extern "C" fn(caller:
                                                                                                         *mut awe_webview,
                                                                                                     url:
                                                                                                         *const awe_string)>);
    pub fn awe_webview_set_callback_open_external_link(webview:
                                                           *mut awe_webview,
                                                       callback:
                                                           ::std::option::Option<unsafe extern "C" fn(caller:
                                                                                                          *mut awe_webview,
                                                                                                      url:
                                                                                                          *const awe_string,
                                                                                                      source:
                                                                                                          *const awe_string)>);
    pub fn awe_webview_set_callback_request_download(webview:
                                                         *mut awe_webview,
                                                     callback:
                                                         ::std::option::Option<unsafe extern "C" fn(caller:
                                                                                                        *mut awe_webview,
                                                                                                    download:
                                                                                                        *const awe_string)>);
    pub fn awe_webview_set_callback_web_view_crashed(webview:
                                                         *mut awe_webview,
                                                     callback:
                                                         ::std::option::Option<unsafe extern "C" fn(caller:
                                                                                                        *mut awe_webview)>);
    pub fn awe_webview_set_callback_plugin_crashed(webview: *mut awe_webview,
                                                   callback:
                                                       ::std::option::Option<unsafe extern "C" fn(caller:
                                                                                                      *mut awe_webview,
                                                                                                  plugin_name:
                                                                                                      *const awe_string)>);
    pub fn awe_webview_set_callback_request_move(webview: *mut awe_webview,
                                                 callback:
                                                     ::std::option::Option<unsafe extern "C" fn(caller:
                                                                                                    *mut awe_webview,
                                                                                                x:
                                                                                                    ::std::os::raw::c_int,
                                                                                                y:
                                                                                                    ::std::os::raw::c_int)>);
    pub fn awe_webview_set_callback_get_page_contents(webview:
                                                          *mut awe_webview,
                                                      callback:
                                                          ::std::option::Option<unsafe extern "C" fn(caller:
                                                                                                         *mut awe_webview,
                                                                                                     url:
                                                                                                         *const awe_string,
                                                                                                     contents:
                                                                                                         *const awe_string)>);
    pub fn awe_webview_set_callback_dom_ready(webview: *mut awe_webview,
                                              callback:
                                                  ::std::option::Option<unsafe extern "C" fn(caller:
                                                                                                 *mut awe_webview)>);
    pub fn awe_webview_set_callback_request_file_chooser(webview:
                                                             *mut awe_webview,
                                                         callback:
                                                             ::std::option::Option<unsafe extern "C" fn(caller:
                                                                                                            *mut awe_webview,
                                                                                                        select_multiple_files:
                                                                                                            u8,
                                                                                                        title:
                                                                                                            *const awe_string,
                                                                                                        default_path:
                                                                                                            *const awe_string)>);
    pub fn awe_webview_set_callback_get_scroll_data(webview: *mut awe_webview,
                                                    callback:
                                                        ::std::option::Option<unsafe extern "C" fn(caller:
                                                                                                       *mut awe_webview,
                                                                                                   contentWidth:
                                                                                                       ::std::os::raw::c_int,
                                                                                                   contentHeight:
                                                                                                       ::std::os::raw::c_int,
                                                                                                   preferredWidth:
                                                                                                       ::std::os::raw::c_int,
                                                                                                   scrollX:
                                                                                                       ::std::os::raw::c_int,
                                                                                                   scrollY:
                                                                                                       ::std::os::raw::c_int)>);
    pub fn awe_webview_set_callback_js_console_message(webview:
                                                           *mut awe_webview,
                                                       callback:
                                                           ::std::option::Option<unsafe extern "C" fn(caller:
                                                                                                          *mut awe_webview,
                                                                                                      message:
                                                                                                          *const awe_string,
                                                                                                      line_number:
                                                                                                          ::std::os::raw::c_int,
                                                                                                      source:
                                                                                                          *const awe_string)>);
    pub fn awe_webview_set_callback_get_find_results(webview:
                                                         *mut awe_webview,
                                                     callback:
                                                         ::std::option::Option<unsafe extern "C" fn(caller:
                                                                                                        *mut awe_webview,
                                                                                                    request_id:
                                                                                                        ::std::os::raw::c_int,
                                                                                                    num_matches:
                                                                                                        ::std::os::raw::c_int,
                                                                                                    selection:
                                                                                                        awe_rect,
                                                                                                    cur_match:
                                                                                                        ::std::os::raw::c_int,
                                                                                                    finalUpdate:
                                                                                                        u8)>);
    pub fn awe_webview_set_callback_update_ime(webview: *mut awe_webview,
                                               callback:
                                                   ::std::option::Option<unsafe extern "C" fn(caller:
                                                                                                  *mut awe_webview,
                                                                                              state:
                                                                                                  awe_ime_state,
                                                                                              caret_rect:
                                                                                                  awe_rect)>);
    pub fn awe_webview_set_callback_show_context_menu(webview:
                                                          *mut awe_webview,
                                                      callback:
                                                          ::std::option::Option<unsafe extern "C" fn(caller:
                                                                                                         *mut awe_webview,
                                                                                                     mouse_x:
                                                                                                         ::std::os::raw::c_int,
                                                                                                     mouse_y:
                                                                                                         ::std::os::raw::c_int,
                                                                                                     type_:
                                                                                                         awe_media_type,
                                                                                                     media_state:
                                                                                                         ::std::os::raw::c_int,
                                                                                                     link_url:
                                                                                                         *const awe_string,
                                                                                                     src_url:
                                                                                                         *const awe_string,
                                                                                                     page_url:
                                                                                                         *const awe_string,
                                                                                                     frame_url:
                                                                                                         *const awe_string,
                                                                                                     selection_text:
                                                                                                         *const awe_string,
                                                                                                     is_editable:
                                                                                                         u8,
                                                                                                     edit_flags:
                                                                                                         ::std::os::raw::c_int)>);
    pub fn awe_webview_set_callback_request_login(webview: *mut awe_webview,
                                                  callback:
                                                      ::std::option::Option<unsafe extern "C" fn(caller:
                                                                                                     *mut awe_webview,
                                                                                                 request_id:
                                                                                                     ::std::os::raw::c_int,
                                                                                                 request_url:
                                                                                                     *const awe_string,
                                                                                                 is_proxy:
                                                                                                     u8,
                                                                                                 host_and_port:
                                                                                                     *const awe_string,
                                                                                                 scheme:
                                                                                                     *const awe_string,
                                                                                                 realm:
                                                                                                     *const awe_string)>);
    pub fn awe_webview_set_callback_change_history(webview: *mut awe_webview,
                                                   callback:
                                                       ::std::option::Option<unsafe extern "C" fn(caller:
                                                                                                      *mut awe_webview,
                                                                                                  back_count:
                                                                                                      ::std::os::raw::c_int,
                                                                                                  forward_count:
                                                                                                      ::std::os::raw::c_int)>);
    pub fn awe_webview_set_callback_finish_resize(webview: *mut awe_webview,
                                                  callback:
                                                      ::std::option::Option<unsafe extern "C" fn(caller:
                                                                                                     *mut awe_webview,
                                                                                                 width:
                                                                                                     ::std::os::raw::c_int,
                                                                                                 height:
                                                                                                     ::std::os::raw::c_int)>);
    pub fn awe_webview_set_callback_show_javascript_dialog(webview:
                                                               *mut awe_webview,
                                                           callback:
                                                               ::std::option::Option<unsafe extern "C" fn(caller:
                                                                                                              *mut awe_webview,
                                                                                                          request_id:
                                                                                                              ::std::os::raw::c_int,
                                                                                                          dialog_flags:
                                                                                                              ::std::os::raw::c_int,
                                                                                                          message:
                                                                                                              *const awe_string,
                                                                                                          default_prompt:
                                                                                                              *const awe_string,
                                                                                                          frame_url:
                                                                                                              *const awe_string)>);
    pub fn awe_jsvalue_create_null_value() -> *mut awe_jsvalue;
    pub fn awe_jsvalue_create_bool_value(value: u8) -> *mut awe_jsvalue;
    pub fn awe_jsvalue_create_integer_value(value: ::std::os::raw::c_int)
     -> *mut awe_jsvalue;
    pub fn awe_jsvalue_create_double_value(value: ::std::os::raw::c_double)
     -> *mut awe_jsvalue;
    pub fn awe_jsvalue_create_string_value(value: *const awe_string)
     -> *mut awe_jsvalue;
    pub fn awe_jsvalue_create_object_value(value: *const awe_jsobject)
     -> *mut awe_jsvalue;
    pub fn awe_jsvalue_create_array_value(value: *const awe_jsarray)
     -> *mut awe_jsvalue;
    pub fn awe_jsvalue_destroy(jsvalue: *mut awe_jsvalue);
    pub fn awe_jsvalue_get_type(jsvalue: *const awe_jsvalue)
     -> awe_jsvalue_type;
    pub fn awe_jsvalue_to_string(jsvalue: *const awe_jsvalue)
     -> *mut awe_string;
    pub fn awe_jsvalue_to_integer(jsvalue: *const awe_jsvalue)
     -> ::std::os::raw::c_int;
    pub fn awe_jsvalue_to_double(jsvalue: *const awe_jsvalue)
     -> ::std::os::raw::c_double;
    pub fn awe_jsvalue_to_boolean(jsvalue: *const awe_jsvalue) -> u8;
    pub fn awe_jsvalue_get_array(jsvalue: *const awe_jsvalue)
     -> *const awe_jsarray;
    pub fn awe_jsvalue_get_object(jsvalue: *const awe_jsvalue)
     -> *const awe_jsobject;
    pub fn awe_jsarray_create(jsvalue_array: *mut *const awe_jsvalue,
                              length: size_t) -> *mut awe_jsarray;
    pub fn awe_jsarray_destroy(jsarray: *mut awe_jsarray);
    pub fn awe_jsarray_get_size(jsarray: *const awe_jsarray) -> size_t;
    pub fn awe_jsarray_get_element(jsarray: *const awe_jsarray, index: size_t)
     -> *const awe_jsvalue;
    pub fn awe_jsobject_create() -> *mut awe_jsobject;
    pub fn awe_jsobject_destroy(jsobject: *mut awe_jsobject);
    pub fn awe_jsobject_has_property(jsobject: *const awe_jsobject,
                                     property_name: *const awe_string) -> u8;
    pub fn awe_jsobject_get_property(jsobject: *const awe_jsobject,
                                     property_name: *const awe_string)
     -> *const awe_jsvalue;
    pub fn awe_jsobject_set_property(jsobject: *mut awe_jsobject,
                                     property_name: *const awe_string,
                                     value: *const awe_jsvalue);
    pub fn awe_jsobject_get_size(jsobject: *mut awe_jsobject) -> size_t;
    pub fn awe_jsobject_get_keys(jsobject: *mut awe_jsobject)
     -> *mut awe_jsarray;
    pub fn awe_renderbuffer_get_width(renderbuffer: *const awe_renderbuffer)
     -> ::std::os::raw::c_int;
    pub fn awe_renderbuffer_get_height(renderbuffer: *const awe_renderbuffer)
     -> ::std::os::raw::c_int;
    pub fn awe_renderbuffer_get_rowspan(renderbuffer: *const awe_renderbuffer)
     -> ::std::os::raw::c_int;
    pub fn awe_renderbuffer_get_buffer(renderbuffer: *const awe_renderbuffer)
     -> *const ::std::os::raw::c_uchar;
    pub fn awe_renderbuffer_copy_to(renderbuffer: *const awe_renderbuffer,
                                    dest_buffer: *mut ::std::os::raw::c_uchar,
                                    dest_rowspan: ::std::os::raw::c_int,
                                    dest_depth: ::std::os::raw::c_int,
                                    convert_to_rgba: u8, flip_y: u8);
    pub fn awe_renderbuffer_copy_to_float(renderbuffer:
                                              *const awe_renderbuffer,
                                          dest_buffer:
                                              *mut ::std::os::raw::c_float);
    pub fn awe_renderbuffer_save_to_png(renderbuffer: *const awe_renderbuffer,
                                        file_path: *const awe_string,
                                        preserve_transparency: u8) -> u8;
    pub fn awe_renderbuffer_save_to_jpeg(renderbuffer:
                                             *const awe_renderbuffer,
                                         file_path: *const awe_string,
                                         quality: ::std::os::raw::c_int)
     -> u8;
    pub fn awe_renderbuffer_get_alpha_at_point(renderbuffer:
                                                   *const awe_renderbuffer,
                                               x: ::std::os::raw::c_int,
                                               y: ::std::os::raw::c_int)
     -> ::std::os::raw::c_uchar;
    pub fn awe_renderbuffer_flush_alpha(renderbuffer:
                                            *const awe_renderbuffer);
    pub fn awe_webview_set_callback_resource_request(webview:
                                                         *mut awe_webview,
                                                     callback:
                                                         ::std::option::Option<unsafe extern "C" fn(caller:
                                                                                                        *mut awe_webview,
                                                                                                    request:
                                                                                                        *mut awe_resource_request)
                                                                                   ->
                                                                                       *mut awe_resource_response>);
    pub fn awe_webview_set_callback_resource_response(webview:
                                                          *mut awe_webview,
                                                      callback:
                                                          ::std::option::Option<unsafe extern "C" fn(caller:
                                                                                                         *mut awe_webview,
                                                                                                     url:
                                                                                                         *const awe_string,
                                                                                                     status_code:
                                                                                                         ::std::os::raw::c_int,
                                                                                                     was_cached:
                                                                                                         u8,
                                                                                                     request_time_ms:
                                                                                                         int64,
                                                                                                     response_time_ms:
                                                                                                         int64,
                                                                                                     expected_content_size:
                                                                                                         int64,
                                                                                                     mime_type:
                                                                                                         *const awe_string)>);
    pub fn awe_resource_response_create(num_bytes: size_t,
                                        buffer: *mut ::std::os::raw::c_uchar,
                                        mime_type: *const awe_string)
     -> *mut awe_resource_response;
    pub fn awe_resource_response_create_from_file(file_path:
                                                      *const awe_string)
     -> *mut awe_resource_response;
    pub fn awe_resource_request_cancel(request: *mut awe_resource_request);
    pub fn awe_resource_request_get_url(request: *mut awe_resource_request)
     -> *mut awe_string;
    pub fn awe_resource_request_get_method(request: *mut awe_resource_request)
     -> *mut awe_string;
    pub fn awe_resource_request_set_method(request: *mut awe_resource_request,
                                           method: *const awe_string);
    pub fn awe_resource_request_get_referrer(request:
                                                 *mut awe_resource_request)
     -> *mut awe_string;
    pub fn awe_resource_request_set_referrer(request:
                                                 *mut awe_resource_request,
                                             referrer: *const awe_string);
    pub fn awe_resource_request_get_extra_headers(request:
                                                      *mut awe_resource_request)
     -> *mut awe_string;
    pub fn awe_resource_request_set_extra_headers(request:
                                                      *mut awe_resource_request,
                                                  headers: *const awe_string);
    pub fn awe_resource_request_append_extra_header(request:
                                                        *mut awe_resource_request,
                                                    name: *const awe_string,
                                                    value: *const awe_string);
    pub fn awe_resource_request_get_num_upload_elements(request:
                                                            *mut awe_resource_request)
     -> size_t;
    pub fn awe_resource_request_get_upload_element(request:
                                                       *mut awe_resource_request,
                                                   idx: size_t)
     -> *const awe_upload_element;
    pub fn awe_resource_request_clear_upload_elements(request:
                                                          *mut awe_resource_request);
    pub fn awe_resource_request_append_upload_file_path(request:
                                                            *mut awe_resource_request,
                                                        file_path:
                                                            *const awe_string);
    pub fn awe_resource_request_append_upload_bytes(request:
                                                        *mut awe_resource_request,
                                                    bytes: *const awe_string);
    pub fn awe_upload_element_is_file_path(ele: *const awe_upload_element)
     -> u8;
    pub fn awe_upload_element_is_bytes(ele: *const awe_upload_element) -> u8;
    pub fn awe_upload_element_get_bytes(ele: *const awe_upload_element)
     -> *mut awe_string;
    pub fn awe_upload_element_get_file_path(ele: *const awe_upload_element)
     -> *mut awe_string;
    pub fn awe_history_query_result_destroy(res:
                                                *mut awe_history_query_result);
    pub fn awe_history_query_result_get_size(res:
                                                 *mut awe_history_query_result)
     -> size_t;
    pub fn awe_history_query_result_get_entry_at_index(res:
                                                           *mut awe_history_query_result,
                                                       idx: size_t)
     -> *mut awe_history_entry;
    pub fn awe_history_entry_destroy(entry: *mut awe_history_entry);
    pub fn awe_history_entry_get_url(entry: *mut awe_history_entry)
     -> *mut awe_string;
    pub fn awe_history_entry_get_title(entry: *mut awe_history_entry)
     -> *mut awe_string;
    pub fn awe_history_entry_get_visit_time(entry: *mut awe_history_entry)
     -> ::std::os::raw::c_double;
    pub fn awe_history_entry_get_visit_count(entry: *mut awe_history_entry)
     -> ::std::os::raw::c_int;
}
